const sharp = require('sharp');
const fs = require('fs');

// –ü—Ä–æ—Å—Ç–æ–π SVG –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testSVG = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
  <rect width="800" height="400" fill="#667eea"/>
  
  <!-- –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ -->
  <text x="400" y="100" text-anchor="middle" fill="white" 
        font-family="Arial, sans-serif" font-size="32" font-weight="bold">
    –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ü—Ä–∏–≤–µ—Ç
  </text>
  
  <text x="400" y="150" text-anchor="middle" fill="white" 
        font-family="Courier New, monospace" font-size="48" font-weight="bold">
    –¶–∏—Ñ—Ä—ã: 123:45:67
  </text>
  
  <text x="400" y="200" text-anchor="middle" fill="white" 
        font-family="DejaVu Sans, sans-serif" font-size="32">
    DejaVu: 12:34:56
  </text>
  
  <text x="400" y="250" text-anchor="middle" fill="white" 
        font-family="serif" font-size="32">
    Serif: 98:76:54
  </text>
  
  <text x="400" y="300" text-anchor="middle" fill="white" 
        font-family="monospace" font-size="32">
    Monospace: 11:22:33
  </text>
</svg>`;

async function testImageGeneration() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        
        // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        const pngBuffer1 = await sharp(Buffer.from(testSVG, 'utf8'))
            .png()
            .toBuffer();
        
        fs.writeFileSync('test-basic.png', pngBuffer1);
        console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test-basic.png');
        
        // –¢–µ—Å—Ç 2: –° –≤—ã—Å–æ–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
        const pngBuffer2 = await sharp(Buffer.from(testSVG, 'utf8'), {
            density: 300
        })
            .png({
                quality: 100,
                compressionLevel: 6
            })
            .toBuffer();
        
        fs.writeFileSync('test-hd.png', pngBuffer2);
        console.log('‚úÖ HD –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test-hd.png');
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:');
        console.log('Platform:', process.platform);
        console.log('Node version:', process.version);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ fontconfig
        const { execSync } = require('child_process');
        try {
            const fontList = execSync('fc-list', { encoding: 'utf8' });
            console.log('‚úÖ Fontconfig –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤:', fontList.split('\n').length);
            
            // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            const arialFonts = fontList.split('\n').filter(line => 
                line.toLowerCase().includes('arial') || 
                line.toLowerCase().includes('dejavu') ||
                line.toLowerCase().includes('courier')
            );
            
            if (arialFonts.length > 0) {
                console.log('üî§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã:');
                arialFonts.slice(0, 5).forEach(font => console.log('  -', font));
            }
        } catch (e) {
            console.log('‚ùå Fontconfig –Ω–µ –Ω–∞–π–¥–µ–Ω:', e.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

testImageGeneration();
