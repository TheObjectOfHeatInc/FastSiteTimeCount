const { createCanvas } = require('canvas');
const fs = require('fs');

function formatTime(date) {
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
}

function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

function generateTimerImage() {
    // –°–æ–∑–¥–∞–µ–º canvas —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è Telegram –ø—Ä–µ–≤—å—é
    const canvas = createCanvas(1200, 630);
    const ctx = canvas.getContext('2d');
    
    const now = new Date();
    const timeString = formatTime(now);
    const dateString = formatDate(now);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, 1200, 630);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    
    // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 1200, 630);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∑–≤–µ–∑–¥–æ—á–∫–∏)
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    for (let i = 0; i < 150; i++) {
        const x = Math.random() * 1200;
        const y = Math.random() * 630;
        const radius = Math.random() * 4 + 1;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–Ω–∏
    ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';
    ctx.shadowBlur = 10;
    ctx.shadowOffsetX = 4;
    ctx.shadowOffsetY = 4;
    
    // –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = 'white';
    ctx.font = 'bold 100px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText('‚è∞ –¢–∞–π–º–µ—Ä', 600, 150);
    
    // –†–∏—Å—É–µ–º –≤—Ä–µ–º—è
    ctx.font = 'bold 160px "Courier New", monospace';
    ctx.fillText(timeString, 600, 300);
    
    // –†–∏—Å—É–µ–º –¥–∞—Ç—É
    ctx.font = 'bold 60px Arial, sans-serif';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.fillText(dateString, 600, 420);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    ctx.font = 'bold 36px Arial, sans-serif';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.fillText('–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', 600, 520);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω–∏
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    
    return canvas;
}

function saveImage() {
    try {
        console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞...');
        
        const canvas = generateTimerImage();
        const buffer = canvas.toBuffer('image/png');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync('timer-preview.png', buffer);
        
        const now = new Date();
        const timeString = formatTime(now);
        const dateString = formatDate(now);
        
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ timer-preview.png');
        console.log(`üïê –í—Ä–µ–º—è: ${timeString}`);
        console.log(`üìÖ –î–∞—Ç–∞: ${dateString}`);
        console.log('üìè –†–∞–∑–º–µ—Ä: 1200x630 –ø–∏–∫—Å–µ–ª–µ–π');
        console.log('');
        console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ git:');
        console.log('git add timer-preview.png');
        console.log('git commit -m "Update timer preview image"');
        console.log('git push');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
        console.log('');
        console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
        console.log('npm install');
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    saveImage();
}

module.exports = { generateTimerImage, saveImage };
