const express = require('express');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ - 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞
const TARGET_DATE = new Date('2025-09-11T00:00:00.000Z').getTime();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
function getTimeRemaining() {
    const now = Date.now();
    const remaining = TARGET_DATE - now;
    return Math.max(0, remaining); // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static('.'));

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(ms) {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SVG —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
function createTimerSVG() {
    const currentTime = new Date().toLocaleString('ru-RU');
    const remaining = getTimeRemaining();
    const formattedTime = formatTime(remaining);
    const targetDate = new Date(TARGET_DATE).toLocaleDateString('ru-RU');
    
    return `
<svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="rgba(0,0,0,0.5)"/>
    </filter>
  </defs>
  
  <!-- –§–æ–Ω -->
  <rect width="800" height="400" fill="url(#bgGradient)"/>
  
  <!-- –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä -->
  <rect x="50" y="50" width="700" height="300" fill="rgba(255,255,255,0.1)" rx="20"/>
  
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
  <text x="400" y="100" text-anchor="middle" fill="white" font-family="Arial, sans-serif" 
        font-size="28" font-weight="bold" filter="url(#shadow)">
    ‚è∞ –î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å:
  </text>
  
  <!-- –í—Ä–µ–º—è -->
  <text x="400" y="180" text-anchor="middle" fill="white" font-family="Arial, sans-serif" 
        font-size="58" font-weight="bold" filter="url(#shadow)">
    ${formattedTime}
  </text>
  
  <!-- –ü–æ–¥–ø–∏—Å—å -->
  <text x="400" y="250" text-anchor="middle" fill="rgba(255,255,255,0.8)" 
        font-family="Arial, sans-serif" font-size="20">
    –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: ${targetDate}
  </text>
  
  <!-- –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è -->
  <text x="400" y="310" text-anchor="middle" fill="rgba(255,255,255,0.6)" 
        font-family="Arial, sans-serif" font-size="18">
    –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentTime}
  </text>
  
  <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
  <circle cx="150" cy="350" r="4" fill="rgba(255,255,255,0.3)"/>
  <circle cx="650" cy="350" r="4" fill="rgba(255,255,255,0.3)"/>
  <circle cx="200" cy="60" r="3" fill="rgba(255,255,255,0.4)"/>
  <circle cx="600" cy="60" r="3" fill="rgba(255,255,255,0.4)"/>
</svg>`;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
app.get('/timer-image', async (req, res) => {
    try {
        const svgString = createTimerSVG();
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG —Å –ø–æ–º–æ—â—å—é Sharp
        const pngBuffer = await sharp(Buffer.from(svgString))
            .png()
            .toBuffer();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        res.setHeader('Content-Type', 'image/png');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        res.send(pngBuffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SVG
app.get('/timer-svg', (req, res) => {
    try {
        const svgString = createTimerSVG();
        
        res.setHeader('Content-Type', 'image/svg+xml');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.send(svgString);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ JSON
app.get('/api/time', (req, res) => {
    const remaining = getTimeRemaining();
    const now = Date.now();
    res.json({
        remaining: remaining,
        formatted: formatTime(remaining),
        targetDate: TARGET_DATE,
        currentTime: now,
        targetDateFormatted: new Date(TARGET_DATE).toLocaleString('ru-RU')
    });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–µ
app.get('/api/target', (req, res) => {
    res.json({
        targetDate: TARGET_DATE,
        targetDateFormatted: new Date(TARGET_DATE).toLocaleString('ru-RU'),
        description: '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞'
    });
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –ø—Ä–µ–≤—å—é
app.get('/refresh', (req, res) => {
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const fullUrl = `${protocol}://${host}`;
    const imageUrl = `${fullUrl}/timer-image`;
    const remaining = getTimeRemaining();
    const formattedTime = formatTime(remaining);
    
    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    let html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ meta —Ç–µ–≥–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ URL –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    html = html.replace('<meta property="og:url" content="">', `<meta property="og:url" content="${fullUrl}/refresh?t=${Date.now()}">`);
    html = html.replace(/content="\/timer-image"/g, `content="${imageUrl}?t=${Date.now()}"`);
    html = html.replace('<meta name="twitter:image" content="/timer-image">', `<meta name="twitter:image" content="${imageUrl}?t=${Date.now()}">`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    html = html.replace('<meta property="og:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta property="og:title" content="‚è∞ –î–æ 11.09.2025: ${formattedTime}">`);
    html = html.replace('<meta property="og:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formattedTime} | ${new Date().toLocaleTimeString('ru-RU')}"`);
    html = html.replace('<meta name="twitter:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta name="twitter:title" content="‚è∞ –î–æ 11.09.2025: ${formattedTime}">`);
    html = html.replace('<meta name="twitter:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formattedTime} | ${new Date().toLocaleTimeString('ru-RU')}"`);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    
    res.send(html);
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ meta —Ç–µ–≥–∞–º–∏
app.get('/', (req, res) => {
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const fullUrl = `${protocol}://${host}`;
    const timestamp = Date.now();
    const imageUrl = `${fullUrl}/timer-image?t=${timestamp}`;
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    
    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    let html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º meta —Ç–µ–≥–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    html = html.replace('<meta property="og:url" content="">', `<meta property="og:url" content="${fullUrl}?t=${timestamp}">`);
    html = html.replace(/content="\/timer-image"/g, `content="${imageUrl}"`);
    html = html.replace('<meta name="twitter:image" content="/timer-image">', `<meta name="twitter:image" content="${imageUrl}">`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    html = html.replace('<meta property="og:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta property="og:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">`);
    html = html.replace('<meta property="og:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">`);
    html = html.replace('<meta name="twitter:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta name="twitter:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">`);
    html = html.replace('<meta name="twitter:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.setHeader('ETag', `"${timestamp}"`);
    
    res.send(html);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async function saveTimerImage() {
    try {
        const remaining = getTimeRemaining();
        const svgString = createTimerSVG();
        
        // –°–æ–∑–¥–∞–µ–º PNG —Å –ø–æ–º–æ—â—å—é Sharp
        const pngBuffer = await sharp(Buffer.from(svgString))
            .png()
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        fs.writeFileSync('timer-preview.png', pngBuffer);
        console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –î–æ 11.09.2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formatTime(remaining)}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
    console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞: http://localhost:${PORT}/timer-image`);
    console.log(`SVG —Ç–∞–π–º–µ—Ä–∞: http://localhost:${PORT}/timer-svg`);
    console.log(`–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: ${new Date(TARGET_DATE).toLocaleString('ru-RU')}`);
    console.log(`–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formatTime(getTimeRemaining())}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    saveTimerImage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º—Å)
    setInterval(saveTimerImage, 60000);
});

module.exports = app;