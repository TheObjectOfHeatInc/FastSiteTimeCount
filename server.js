const express = require('express');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
const BASE_URL = process.env.BASE_URL || 'http://lehagigachad.ru';

// Middleware –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ HTTPS (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è HTTP)
app.use((req, res, next) => {
    // –û—Ç–∫–ª—é—á–∞–µ–º HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ HTTP
    // if (req.header('x-forwarded-proto') !== 'https' && process.env.NODE_ENV === 'production') {
    //     res.redirect(`https://${req.header('host')}${req.url}`);
    // } else {
        next();
    // }
});

// –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ - 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞
const TARGET_DATE = new Date('2025-09-11T00:00:00.000Z').getTime();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN; // –ü–æ–ª—É—á–∏–º –æ—Ç @BotFather
let bot = null;
const activeChats = new Set(); // –ß–∞—Ç—ã –≥–¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
const chatMessages = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let timerInterval = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
function getTimeRemaining() {
    const now = Date.now();
    const remaining = TARGET_DATE - now;
    return Math.max(0, remaining); // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
async function initTelegramBot() {
    if (!BOT_TOKEN) {
        console.log('‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.');
        return;
    }

    try {
        console.log('üîÑ –û—á–∏—â–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        const tempBot = new TelegramBot(BOT_TOKEN);
        
        // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
        await tempBot.deleteWebHook();
        
        // –û—á–∏—â–∞–µ–º pending updates
        await tempBot.getUpdates({ offset: -1, limit: 1 });
        
        console.log('‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
        
        // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        bot = new TelegramBot(BOT_TOKEN, { 
            polling: {
                interval: 2000,
                autoStart: false,
                params: {
                    timeout: 20,
                    offset: 0
                }
            }
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤—Ä—É—á–Ω—É—é
        await bot.startPolling();
        console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        let reconnectAttempts = 0;
        const maxReconnects = 3;
        
        bot.on('polling_error', async (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
            
            if (error.message.includes('409') && reconnectAttempts < maxReconnects) {
                reconnectAttempts++;
                console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤! –ü–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts}/${maxReconnects}...`);
                
                try {
                    await bot.stopPolling();
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    await bot.startPolling();
                    console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
                } catch (e) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', e.message);
                }
            } else if (reconnectAttempts >= maxReconnects) {
                console.log('üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
                process.exit(1);
            }
        });
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å: BOT_TOKEN="–≤–∞—à_—Ç–æ–∫–µ–Ω" node reset-bot.js');
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.onText(/\/start/, (msg) => {
        console.log('üü¢ –ö–û–ú–ê–ù–î–ê /start –æ—Ç', msg.from?.username || msg.from?.first_name, '–≤ —á–∞—Ç–µ', msg.chat.type);
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, `üéØ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–∞–π–º–µ—Ä–∞ –¥–æ 11.09.2025!
        
–ö–æ–º–∞–Ω–¥—ã:
üöÄ /timer - –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚èπÔ∏è /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
üìä /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚è∞ /time - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

–ù–∞–ø–∏—à–∏ "–°–¢–ê–†–¢–£–ï–ú!" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞`);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /timer
    bot.onText(/\/timer/, (msg) => {
        const chatId = msg.chat.id;
        startTimerForChat(chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stop
    bot.onText(/\/stop/, (msg) => {
        const chatId = msg.chat.id;
        stopTimerForChat(chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    bot.onText(/\/status/, (msg) => {
        const chatId = msg.chat.id;
        const isActive = activeChats.has(chatId);
        const remaining = getTimeRemaining();
        const currentTime = formatTime(remaining);
        
        bot.sendMessage(chatId, `üìä –°—Ç–∞—Ç—É—Å:
${isActive ? '‚úÖ –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚è∞ –î–æ 11.09.2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: ${activeChats.size}`);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /time
    bot.onText(/\/time/, (msg) => {
        const chatId = msg.chat.id;
        sendCurrentTimer(chatId);
    });

    // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ "–°–¢–ê–†–¢–£–ï–ú!" –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    bot.onText(/(–°–¢–ê–†–¢–£–ï–ú!|–°—Ç–∞—Ä—Ç—É–µ–º!|—Å—Ç–∞—Ä—Ç—É–µ–º!|—Å—Ç–∞—Ä—Ç|–°–¢–ê–†–¢)/i, (msg) => {
        const chatId = msg.chat.id;
        startTimerForChat(chatId);
    });

    // –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ "—Å—Ç–æ–ø!"
    bot.onText(/—Å—Ç–æ–ø!/i, (msg) => {
        const chatId = msg.chat.id;
        stopTimerForChat(chatId);
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)
    bot.on('message', (msg) => {
        console.log('üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:');
        console.log('  üë§ –û—Ç:', msg.from?.username || msg.from?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');
        console.log('  üí¨ –ß–∞—Ç:', msg.chat.type, '|', msg.chat.title || msg.chat.first_name || '–õ–∏—á–∫–∞');
        console.log('  üìù –¢–µ–∫—Å—Ç:', msg.text || '–ù–ï–¢ –¢–ï–ö–°–¢–ê');
        console.log('  üÜî Chat ID:', msg.chat.id);
        console.log('---');
        
        // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã
    });
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞
function startTimerForChat(chatId) {
    activeChats.add(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    sendCurrentTimer(chatId);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!timerInterval && activeChats.size > 0) {
        startGlobalTimer();
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞
function stopTimerForChat(chatId) {
    activeChats.delete(chatId);
    chatMessages.delete(chatId); // –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    
    bot.sendMessage(chatId, `‚èπÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.
    
–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏ "–°–¢–ê–†–¢–£–ï–ú!" –∏–ª–∏ /timer`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    if (activeChats.size === 0 && timerInterval) {
        stopGlobalTimer();
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function sendCurrentTimer(chatId) {
    const timestamp = Date.now();
    const timerUrl = `${BASE_URL}/timer/${timestamp}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const existingMessageId = chatMessages.get(chatId);
    
    if (existingMessageId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.editMessageText(timerUrl, {
            chat_id: chatId,
            message_id: existingMessageId
        }).catch(error => {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ ${chatId}:`, error.message);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sendNewTimerMessage(chatId, timerUrl);
        });
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sendNewTimerMessage(chatId, timerUrl);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º
function sendNewTimerMessage(chatId, timerUrl) {
    bot.sendMessage(chatId, timerUrl).then((message) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        chatMessages.set(chatId, message.message_id);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è ${message.message_id} –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    }).catch(error => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
    });
}

// –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function startGlobalTimer() {
    console.log('üïê –ó–∞–ø—É—â–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    
    timerInterval = setInterval(() => {
        if (activeChats.size > 0) {
            console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ ${activeChats.size} —á–∞—Ç–æ–≤`);
            
            activeChats.forEach(chatId => {
                sendCurrentTimer(chatId);
            });
        }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function stopGlobalTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
        console.log('üõë –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static('.'));

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(ms) {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Canvas (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
function createTimerCanvas() {
    const remaining = getTimeRemaining();
    const formattedTime = formatTime(remaining);
    const currentTime = new Date().toLocaleString('ru-RU');
    const targetDate = new Date(TARGET_DATE).toLocaleDateString('ru-RU');

    // –°–æ–∑–¥–∞–µ–º canvas
    const width = 800;
    const height = 400;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    ctx.roundRect(50, 50, 700, 300, 20);
    ctx.fill();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
    ctx.fillStyle = 'white';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–æ–≥—Ä–æ–º–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É)
    ctx.font = 'bold 120px "DejaVu Sans Mono", "Courier New", monospace';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(formattedTime, width / 2, height / 2 + 20);



    return canvas.toBuffer('image/png');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SVG —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
function createTimerSVG() {
    const currentTime = new Date().toLocaleString('ru-RU');
    const remaining = getTimeRemaining();
    const formattedTime = formatTime(remaining);
    const targetDate = new Date(TARGET_DATE).toLocaleDateString('ru-RU');
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è SVG
    const safeFormattedTime = formattedTime.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    const safeCurrentTime = currentTime.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    const safeTargetDate = targetDate.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="rgba(0,0,0,0.5)"/>
    </filter>
    <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Ü–∏—Ñ—Ä -->
    <style type="text/css"><![CDATA[
      .timer-font { 
        font-family: 'DejaVu Sans Mono', 'Liberation Mono', 'Courier New', monospace; 
        font-weight: bold;
      }
      .title-font { 
        font-family: 'DejaVu Sans', 'Liberation Sans', 'Open Sans', sans-serif; 
        font-weight: bold;
      }
      .info-font { 
        font-family: 'DejaVu Sans', 'Liberation Sans', 'Open Sans', sans-serif; 
        font-weight: normal;
      }
    ]]></style>
  </defs>
  
  <!-- –§–æ–Ω -->
  <rect width="800" height="400" fill="url(#bgGradient)"/>
  
  <!-- –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä -->
  <rect x="50" y="50" width="700" height="300" fill="rgba(255,255,255,0.1)" rx="20"/>
  
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
  <text x="400" y="100" text-anchor="middle" fill="white" 
        font-family="Arial, sans-serif" font-size="26" font-weight="bold">
    TIME LEFT: 11.09.2025
  </text>
  
  <!-- –í—Ä–µ–º—è -->
  <text x="400" y="180" text-anchor="middle" fill="white" 
        font-family="monospace" font-size="72" font-weight="bold">
    ${safeFormattedTime}
  </text>
  
  <!-- –ü–æ–¥–ø–∏—Å—å -->
  <text x="400" y="250" text-anchor="middle" fill="rgba(255,255,255,0.8)" 
        font-family="Arial, sans-serif" font-size="18">
    TARGET: ${safeTargetDate}
  </text>
  
  <!-- –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è -->
  <text x="400" y="280" text-anchor="middle" fill="rgba(255,255,255,0.6)" 
        font-family="Arial, sans-serif" font-size="16">
    UPDATED: ${new Date().toLocaleTimeString()}
  </text>
  
  <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
  <circle cx="150" cy="330" r="4" fill="rgba(255,255,255,0.3)"/>
  <circle cx="650" cy="330" r="4" fill="rgba(255,255,255,0.3)"/>
  <circle cx="200" cy="80" r="3" fill="rgba(255,255,255,0.4)"/>
  <circle cx="600" cy="80" r="3" fill="rgba(255,255,255,0.4)"/>
</svg>`;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
app.get('/timer-image', async (req, res) => {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SVG –±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const svgString = createTimerSVG();
        
        const pngBuffer = await sharp(Buffer.from(svgString, 'utf8'), {
            density: 150
        })
            .png({
                quality: 95
            })
            .toBuffer();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        res.setHeader('Content-Type', 'image/png');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        res.send(pngBuffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SVG
app.get('/timer-svg', (req, res) => {
    try {
        const svgString = createTimerSVG();
        
        res.setHeader('Content-Type', 'image/svg+xml');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.send(svgString);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ JSON
app.get('/api/time', (req, res) => {
    const remaining = getTimeRemaining();
    const now = Date.now();
    res.json({
        remaining: remaining,
        formatted: formatTime(remaining),
        targetDate: TARGET_DATE,
        currentTime: now,
        targetDateFormatted: new Date(TARGET_DATE).toLocaleString('ru-RU')
    });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–µ
app.get('/api/target', (req, res) => {
    res.json({
        targetDate: TARGET_DATE,
        targetDateFormatted: new Date(TARGET_DATE).toLocaleString('ru-RU'),
        description: '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞'
    });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Canvas
app.get('/test-canvas', async (req, res) => {
    try {
        const canvas = createCanvas(800, 400);
        const ctx = canvas.getContext('2d');

        // –§–æ–Ω
        ctx.fillStyle = '#667eea';
        ctx.fillRect(0, 0, 800, 400);

        // –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–∞
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        ctx.font = '32px Arial';
        ctx.fillText('–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!', 400, 100);

        ctx.font = 'bold 48px monospace';
        ctx.fillText('–¶–∏—Ñ—Ä—ã: 123:45:67', 400, 180);

        ctx.font = '24px serif';
        ctx.fillText('–í—Ä–µ–º—è: ' + new Date().toLocaleTimeString('ru-RU'), 400, 260);

        ctx.font = '20px sans-serif';
        ctx.fillText('Canvas —Ä–∞–±–æ—Ç–∞–µ—Ç!', 400, 320);

        const buffer = canvas.toBuffer('image/png');
        res.setHeader('Content-Type', 'image/png');
        res.send(buffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ Canvas:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ Canvas: ' + error.message);
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ (SVG)
app.get('/test-fonts', async (req, res) => {
    try {
        const testSVG = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
  <rect width="800" height="400" fill="#667eea"/>
  
  <text x="400" y="80" text-anchor="middle" fill="white" 
        font-family="DejaVu Sans, sans-serif" font-size="24" font-weight="bold">
    –¢–µ—Å—Ç —à—Ä–∏—Ñ—Ç–æ–≤ –≤ Docker
  </text>
  
  <text x="400" y="150" text-anchor="middle" fill="white" 
        font-family="DejaVu Sans Mono, monospace" font-size="48" font-weight="bold">
    123:45:67
  </text>
  
  <text x="400" y="220" text-anchor="middle" fill="white" 
        font-family="Liberation Sans, sans-serif" font-size="32">
    Liberation: 12:34:56
  </text>
  
  <text x="400" y="280" text-anchor="middle" fill="white" 
        font-family="Open Sans, sans-serif" font-size="32">
    Open Sans: 98:76:54
  </text>
  
  <text x="400" y="340" text-anchor="middle" fill="white" 
        font-family="serif" font-size="32">
    Fallback serif: 11:22:33
  </text>
</svg>`;

        const pngBuffer = await sharp(Buffer.from(testSVG, 'utf8'), {
            density: 300
        })
            .png({
                quality: 100,
                compressionLevel: 6
            })
            .toBuffer();

        res.setHeader('Content-Type', 'image/png');
        res.send(pngBuffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ Telegram
app.get('/force-update', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    const timestamp = Date.now();
    
    res.json({
        currentTime,
        remaining,
        liveUrl: `${fullUrl}/live`,
        instructions: [
            "üî¥ –õ–£–ß–®–ò–ô –°–ü–û–°–û–ë - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ LIVE —Å—Å—ã–ª–∫—É:",
            `${fullUrl}/live`,
            "",
            "‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –±–æ—Ç—É @WebpageBot –û–î–ò–ù —Ä–∞–∑:",
            `${fullUrl}/live`,
            "",
            "üéØ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–µ–≤—å—é –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥!",
            "",
            "üìù –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ LIVE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç):",
            `${fullUrl}/timer/${timestamp}`
        ],
        imageUrl: `${fullUrl}/timer-image?v=${timestamp}`,
        tip: "LIVE —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∞ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –æ–¥–∏–Ω —Ä–∞–∑!"
    });
});

// –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
app.get('/live', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    // –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (30000 –º—Å)
    const minuteTimestamp = Math.floor(Date.now() / 30000);
    const imageUrl = `${fullUrl}/timer-image?live=${minuteTimestamp}&time=${currentTime.replace(/:/g, '-')}`;
    
    const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚è∞ ${currentTime} –¥–æ 11.09.2025</title>
    
    <!-- Open Graph —Ç–µ–≥–∏ -->
    <meta property="og:title" content="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${currentTime}">
    <meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${currentTime}. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!">
    <meta property="og:image" content="${imageUrl}">
    <meta property="og:image:width" content="800">
    <meta property="og:image:height" content="400">
    <meta property="og:type" content="website">
    <meta property="og:url" content="${fullUrl}/live?v=${minuteTimestamp}">
    
    <!-- Twitter —Ç–µ–≥–∏ -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${currentTime}">
    <meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025: ${currentTime} (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)">
    <meta name="twitter:image" content="${imageUrl}">
    
    <!-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ -->
    <meta http-equiv="refresh" content="30">
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: #000;
            color: #fff;
        }
        .timer {
            font-size: 8vw;
            font-weight: 300;
            font-variant-numeric: tabular-nums;
            letter-spacing: -0.02em;
            text-align: center;
        }
        @media (max-width: 768px) {
            .timer { font-size: 12vw; }
        }
    </style>
</head>
<body>
    <div class="timer">${currentTime}</div>
</body>
</html>`;

    // –û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∞–Ω—Ç–∏-–∫—ç—à –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, proxy-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.setHeader('ETag', `"live-${minuteTimestamp}"`);
    res.setHeader('Vary', '*');
    res.send(html);
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
app.get('/timer/:timestamp', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    const timestamp = req.params.timestamp || Date.now();
    const imageUrl = `${fullUrl}/timer-image?id=${timestamp}&v=${Math.floor(Date.now() / 10000)}`;
    
    const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚è∞ ${currentTime} –¥–æ 11.09.2025</title>
    
    <!-- Open Graph —Ç–µ–≥–∏ -->
    <meta property="og:title" content="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${currentTime}">
    <meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${currentTime}. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É!">
    <meta property="og:image" content="${imageUrl}">
    <meta property="og:image:width" content="800">
    <meta property="og:image:height" content="400">
    <meta property="og:type" content="website">
    <meta property="og:url" content="${fullUrl}/timer/${timestamp}">
    
    <!-- Twitter —Ç–µ–≥–∏ -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${currentTime}">
    <meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025: ${currentTime}">
    <meta name="twitter:image" content="${imageUrl}">
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: #000;
            color: #fff;
        }
        .timer {
            font-size: 8vw;
            font-weight: 300;
            font-variant-numeric: tabular-nums;
            letter-spacing: -0.02em;
            text-align: center;
        }
        @media (max-width: 768px) {
            .timer { font-size: 12vw; }
        }
    </style>
</head>
<body>
    <div class="timer">${currentTime}</div>
    <script>
        setTimeout(() => window.location.reload(), 60000);
    </script>
</body>
</html>`;

    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.send(html);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
function getBaseUrl(req) {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω
    if (process.env.NODE_ENV === 'production') {
        return BASE_URL;
    }
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    return `${protocol}://${host}`;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ meta —Ç–µ–≥–æ–≤
app.get('/debug/meta', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const timestamp = Date.now();
    const imageUrl = `${fullUrl}/timer-image?t=${timestamp}`;
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    
    const metaTags = {
        'og:title': `‚è∞ –î–æ 11.09.2025: ${currentTime}`,
        'og:description': `–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}`,
        'og:image': imageUrl,
        'og:url': `${fullUrl}?t=${timestamp}`,
        'twitter:title': `‚è∞ –î–æ 11.09.2025: ${currentTime}`,
        'twitter:description': `–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}`,
        'twitter:image': imageUrl
    };
    
    res.json({
        currentTime,
        metaTags,
        imageUrl,
        fullUrl,
        timestamp,
        baseUrl: BASE_URL,
        isProduction: process.env.NODE_ENV === 'production'
    });
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
app.get('/preview', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    const timestamp = Date.now();
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã + —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    const imageUrl = `${fullUrl}/timer-image?v=${Math.floor(timestamp / 60000)}&r=${Math.random().toString(36).substr(2, 9)}&time=${currentTime.replace(/:/g, '-')}`;
    
    const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚è∞ –î–æ 11.09.2025: ${currentTime}</title>
    
    <!-- Open Graph —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–≤—å—é -->
    <meta property="og:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">
    <meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">
    <meta property="og:image" content="${imageUrl}">
    <meta property="og:image:width" content="800">
    <meta property="og:image:height" content="400">
    <meta property="og:type" content="website">
    <meta property="og:url" content="${fullUrl}/preview?v=${Math.floor(timestamp / 60000)}&r=${Math.random().toString(36).substr(2, 5)}">
    
    <!-- Twitter —Ç–µ–≥–∏ -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">
    <meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">
    <meta name="twitter:image" content="${imageUrl}">
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: #000;
            color: #fff;
        }
        .timer {
            font-size: 8vw;
            font-weight: 300;
            font-variant-numeric: tabular-nums;
            letter-spacing: -0.02em;
            text-align: center;
        }
        @media (max-width: 768px) {
            .timer { font-size: 12vw; }
        }
    </style>
</head>
<body>
    <div class="timer">${currentTime}</div>
    <script>
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => window.location.reload(), 60000);
    </script>
</body>
</html>`;

    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.send(html);
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –ø—Ä–µ–≤—å—é
app.get('/refresh', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const formattedTime = formatTime(remaining);
    const timestamp = Date.now();
    const imageUrl = `${fullUrl}/timer-image?v=${Math.floor(timestamp / 60000)}&r=${Math.random().toString(36).substr(2, 9)}&time=${formattedTime.replace(/:/g, '-')}`;
    
    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    let html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ meta —Ç–µ–≥–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ URL –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    html = html.replace('<meta property="og:url" content="">', `<meta property="og:url" content="${fullUrl}/refresh?t=${Date.now()}">`);
    html = html.replace(/content="\/timer-image"/g, `content="${imageUrl}?t=${Date.now()}"`);
    html = html.replace('<meta name="twitter:image" content="/timer-image">', `<meta name="twitter:image" content="${imageUrl}?t=${Date.now()}">`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    html = html.replace('<meta property="og:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta property="og:title" content="‚è∞ –î–æ 11.09.2025: ${formattedTime}">`);
    html = html.replace('<meta property="og:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formattedTime} | ${new Date().toLocaleTimeString('ru-RU')}"`);
    html = html.replace('<meta name="twitter:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta name="twitter:title" content="‚è∞ –î–æ 11.09.2025: ${formattedTime}">`);
    html = html.replace('<meta name="twitter:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formattedTime} | ${new Date().toLocaleTimeString('ru-RU')}"`);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    
    res.send(html);
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ meta —Ç–µ–≥–∞–º–∏
app.get('/', (req, res) => {
    const fullUrl = getBaseUrl(req);
    const remaining = getTimeRemaining();
    const currentTime = formatTime(remaining);
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    const minuteTimestamp = Math.floor(Date.now() / 60000) * 60000;
    const imageUrl = `${fullUrl}/timer-image?v=${minuteTimestamp}&time=${currentTime.replace(/:/g, '-')}`;
    
    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    let html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º meta —Ç–µ–≥–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    html = html.replace('<meta property="og:url" content="">', `<meta property="og:url" content="${fullUrl}?t=${timestamp}">`);
    html = html.replace(/content="\/timer-image"/g, `content="${imageUrl}"`);
    html = html.replace('<meta name="twitter:image" content="/timer-image">', `<meta name="twitter:image" content="${imageUrl}">`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    html = html.replace('<meta property="og:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta property="og:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">`);
    html = html.replace('<meta property="og:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta property="og:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">`);
    html = html.replace('<meta name="twitter:title" content="üïê –ñ–∏–≤–æ–π —Ç–∞–π–º–µ—Ä">', 
                       `<meta name="twitter:title" content="‚è∞ –î–æ 11.09.2025: ${currentTime}">`);
    html = html.replace('<meta name="twitter:description" content="–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É">', 
                       `<meta name="twitter:description" content="–î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTime} | ${new Date().toLocaleString('ru-RU')}">`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.setHeader('ETag', `"${timestamp}"`);
    
    res.send(html);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async function saveTimerImage() {
    try {
        const remaining = getTimeRemaining();
        const svgString = createTimerSVG();
        
        const pngBuffer = await sharp(Buffer.from(svgString, 'utf8'), {
            density: 150
        })
            .png({
                quality: 95
            })
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        fs.writeFileSync('timer-preview.png', pngBuffer);
        console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –î–æ 11.09.2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formatTime(remaining)}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Å–Ω–æ–≤–Ω–æ–π URL: ${BASE_URL}`);
    console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞: ${BASE_URL}/timer-image`);
    console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: ${new Date(TARGET_DATE).toLocaleString('ru-RU')}`);
    console.log(`‚è∞ –î–æ 11 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –æ—Å—Ç–∞–ª–æ—Å—å: ${formatTime(getTimeRemaining())}`);
    console.log(`üì± –ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${BASE_URL}/preview`);
    console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ meta —Ç–µ–≥–æ–≤: ${BASE_URL}/debug/meta`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    saveTimerImage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º—Å)
    setInterval(saveTimerImage, 60000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    initTelegramBot().catch(error => {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
    });
});

module.exports = app;